-- // This document contains no USA or EU export controlled technical data.
--
-- // CARVE has received funding from the European Union's Horizon 2020 research and
-- // innovation programme under grant agreement No 732410, in the form of financial
-- // support to third parties of the RobMoSys project.

#include "bt_classic.smv"

MODULE physical_object
  VAR
    is_visible : boolean;
    is_found : boolean;
    is_fetched : boolean;

MODULE environment
  VAR
    bottle : physical_object;
    glass : physical_object;
    is_robot_in_kitchen : boolean;
    is_drink_poured : boolean;


-- Use case 1 with the classic BT formulation.
MODULE main
  VAR
#include "uc1_bt.smv"
    --do_bottle_and_glass : bt_parallel(2, do_bottle, do_glass);
    do_bottle_and_glass : bt_sequence(do_bottle, do_glass);
    /--
     As expected, the verification fails if the tick generator is replaced by a
     `single_tick_generator`: The BT cannot always complete the mission with
     success with a single tick.
    --/
    -- tick_generator : bt_single_tick_generator(bt_root);
    tick_generator : bt_tick_generator(bt_root);
    env : environment;

  LTLSPEC
    (
      -- Assumes
      -- Environment Initial conditions
      env.is_robot_in_kitchen = FALSE
      & env.bottle.is_found = FALSE
      & env.bottle.is_fetched = FALSE
      & env.glass.is_found = FALSE
      & env.glass.is_fetched = FALSE
      & env.is_drink_poured = FALSE
      -- Glass and bottle are visible only in the kitchen.
      & G (env.is_robot_in_kitchen <-> (env.bottle.is_visible & env.glass.is_visible))
      -- If the robot tries to go to kitchen, it eventually succedes.
      & ((G F skill_goto_kitchen.enable)
         -> G F (skill_goto_kitchen.enable & env.is_robot_in_kitchen))
      -- The robot is not removed forcefully from the kitchen.
      & G (env.is_robot_in_kitchen -> G env.is_robot_in_kitchen)
      -- If the robot tries to find the bottle, it eventually succedes.
      & G ((skill_find_bottle.enable & env.bottle.is_visible) -> F env.bottle.is_found)
      -- The bottle is not stolen once located.
      & G (env.bottle.is_found -> G env.bottle.is_found)
      -- If the robot tries to fetch the bottle, it eventually succedes.
      & G (skill_fetch_bottle.enable & env.bottle.is_found -> F env.bottle.is_fetched)
      -- The bottle does not fall once grabbed.
      & G (env.bottle.is_fetched -> G env.bottle.is_fetched)
      -- If the robot tries to find the glass, it eventually succedes.
      & G ((skill_find_glass.enable & env.glass.is_visible) -> F env.glass.is_found)
      -- The glass is not stolen once located.
      & G (env.glass.is_found -> G env.glass.is_found)
      -- If the robot tries to fetch the bottle, it eventually succedes.
      & G (skill_fetch_glass.enable & env.glass.is_found -> F env.glass.is_fetched)
      -- The glass does not fall once grabbed.
      & G (env.glass.is_fetched -> G env.glass.is_fetched)
      -- If the robot tries to pour the drink, it eventually succedes.
      & G ((skill_pour_drink.enable & env.glass.is_fetched & env.bottle.is_fetched) -> F env.is_drink_poured)
      -- The drink is not accidentally spilled.
      & G (env.is_drink_poured -> G env.is_drink_poured)
      -- Navigator component
      & G (skill_goto_kitchen.output != bt_output_none
           -> (env.is_robot_in_kitchen <-> skill_goto_kitchen.output = bt_output_true))
      -- Gaze object component: bottle
      & G (env.bottle.is_found -> skill_find_bottle.output in { bt_output_true, bt_output_none })
      -- Gaze object component: glass
      & G (env.glass.is_found -> skill_find_glass.output in { bt_output_none, bt_output_true})
      -- Fetch object component: bottle
      & G (env.bottle.is_fetched -> skill_fetch_bottle.output in { bt_output_none, bt_output_true} )
      -- Fetch object component: glass
      & G (env.glass.is_fetched -> skill_fetch_glass.output in { bt_output_none, bt_output_true })
      -- Pour drink component
      & G (env.is_drink_poured -> skill_pour_drink.output in { bt_output_true, bt_output_none })
    )
    -> (
    -- Guarantees
    -- FALSE &
    F (do_pour_drink_in_kitchen.output = bt_output_true & env.is_drink_poured)
    )
