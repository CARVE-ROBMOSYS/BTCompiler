@requires discrete-time
COMPONENT system
 INTERFACE
  -- OUTPUT PORT mission: boolean;

  -- CONTRACT mission
  --  assume: true;
  --  guarantee: in the future mission;

 REFINEMENT
  SUB bt_inst: bt_spec;
  SUB shared_resource_inst : shared_resource_spec;
  SUB skill_goto_recharge: skill_with_resource_spec;
  SUB skill_patrol: skill_with_resource_spec;
  SUB skill_is_battery_ok : plain_skill;

  CONNECTION bt_inst.from_skill_goto_recharge := skill_goto_recharge.to_bt;
  CONNECTION bt_inst.from_skill_patrol := skill_patrol.to_bt;
  CONNECTION skill_goto_recharge.from_bt := bt_inst.to_skill_goto_recharge;
  CONNECTION skill_patrol.from_bt := bt_inst.to_skill_patrol;
  CONNECTION shared_resource_inst.consumer_1_in_use := skill_goto_recharge.resource_in_use;
  CONNECTION shared_resource_inst.consumer_2_in_use := skill_patrol.resource_in_use;
  CONNECTION bt_inst.from_skill_is_battery_ok := skill_is_battery_ok.to_bt;
  CONNECTION skill_is_battery_ok.from_bt := bt_inst.to_skill_is_battery_ok;

  --CONTRACT mission REFINEDBY Bt_fsm.bt_contract, Robot_env.env_contract, skill_1.skill_contract, skill_2.skill_contract;


COMPONENT shared_resource_spec
  INTERFACE
    INPUT PORT consumer_1_in_use : boolean;
    INPUT PORT consumer_2_in_use : boolean;

  CONTRACT mutual_exclusive_use
    assume: always not (consumer_1_in_use and consumer_2_in_use);
    guarantee: true;


COMPONENT plain_skill
  INTERFACE
    INPUT PORT from_bt : { bt_visit_disable, bt_visit_enable, bt_visit_no };
    OUTPUT PORT to_bt : { bt_output_none, bt_output_running, bt_output_false, bt_output_true, bt_output_disable };


COMPONENT skill_with_resource_spec
  INTERFACE
    INPUT PORT from_bt : { bt_visit_disable, bt_visit_enable, bt_visit_no };
    OUTPUT PORT to_bt : { bt_output_none, bt_output_running, bt_output_false, bt_output_true, bt_output_disable };
    OUTPUT PORT resource_in_use : boolean;

--  CONTRACT bt_skill
--    assume: true;
--    guarantee: always (
--      ((from_bt = bt_visit_enable) implies next (to_bt in { bt_output_running, bt_output_false, bt_output_true } ))
--      and ((from_bt = bt_visit_disable) implies next (to_bt = bt_output_disable))
--      );
--
--  CONTRACT resource_usage
--    assume: true;
--    guarantee: always (
--      (from_bt = bt_visit_enable implies next (to_bt = bt_output_running iff resource_in_use))
--      and (from_bt = bt_visit_disable implies next (not resource_in_use))
--      and ((from_bt = bt_visit_no) implies (resource_in_use iff next resource_in_use))
--    );


COMPONENT bt_spec
  INTERFACE
    INPUT PORT from_skill_goto_recharge: { bt_output_none, bt_output_running, bt_output_false, bt_output_true, bt_output_disable };
    INPUT PORT from_skill_patrol: { bt_output_none, bt_output_running, bt_output_false, bt_output_true, bt_output_disable };
    INPUT PORT from_skill_is_battery_ok: { bt_output_none, bt_output_running, bt_output_false, bt_output_true, bt_output_disable };

    OUTPUT PORT to_skill_goto_recharge : { bt_visit_disable, bt_visit_enable, bt_visit_no };
    OUTPUT PORT to_skill_patrol : { bt_visit_disable, bt_visit_enable, bt_visit_no };
    OUTPUT PORT to_skill_is_battery_ok : { bt_visit_disable, bt_visit_enable, bt_visit_no };

