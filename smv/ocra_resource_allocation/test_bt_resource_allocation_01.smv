-- // This document contains no USA or EU export controlled technical data.
--
-- // CARVE has received funding from the European Union's Horizon 2020 research and
-- // innovation programme under grant agreement No 732410, in the form of financial
-- // support to third parties of the RobMoSys project.

#include "bt_with_skill_reset.smv"

/--
 Requires the resource as long as the skill is running.
 First, wrong attempt.
 --/
MODULE bt_skill_with_resource
  VAR
    embedded_skill : bt_skill;
    resource_held : boolean;
    visit : { bt_visit_no,
              bt_visit_enable,
              bt_visit_disable };
  ASSIGN
    embedded_skill.visit := visit;
    init(resource_held) := FALSE;
    next(resource_held) :=
      case
        output = bt_output_running : TRUE; -- Acquire.
        output = bt_output_none : resource_held; -- Unchanged.
        TRUE : FALSE; -- Release.
      esac;
  DEFINE
    output := embedded_skill.output;

/--
 Requires the resource as long as the skill is running.
 Ok, with a delay.
 --/
MODULE bt_skill_with_resource_with_delay
  VAR
    embedded_skill : bt_skill;
    resource_held : boolean;
    visit : { bt_visit_no,
              bt_visit_enable,
              bt_visit_disable };
    was_already_running : boolean;
  ASSIGN
    init(was_already_running) := FALSE;
    next(was_already_running) :=
      case
        output = bt_output_running : TRUE;
        output = bt_output_none : was_already_running;
        TRUE : FALSE;
      esac;
    embedded_skill.visit := visit;
    init(resource_held) := FALSE;
    next(resource_held) :=
      case
        output = bt_output_running & was_already_running : TRUE; -- Acquire.
        output = bt_output_none : resource_held; -- Unchanged.
        TRUE : FALSE; -- Release.
      esac;
  DEFINE
    output := embedded_skill.output;


MODULE shared_resource(consumer_1, consumer_2)
  DEFINE
    is_mutual_exclusion_satisfied :=
      !(consumer_1.resource_held & consumer_2.resource_held);


MODULE main
  VAR
    goto_recharge : bt_skill_with_resource;
    patrol : bt_skill_with_resource;
    robot_base : shared_resource(goto_recharge, patrol);
    is_battery_ok : bt_skill;
    recharge_if_needed : bt_fallback(is_battery_ok, goto_recharge);
    root : bt_sequence(recharge_if_needed, patrol);
    r_tick : bt_tick_generator(root);

    -- LTLSPEC G robot_base.is_mutual_exclusion_satisfied
    CTLSPEC EF !robot_base.is_mutual_exclusion_satisfied
    LTLSPEC G (root.visit = bt_visit_enable
               -> robot_base.is_mutual_exclusion_satisfied)

