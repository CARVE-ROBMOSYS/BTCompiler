
-- ===============================================================================
MODULE main
    VAR
        TICK_GENERATOR_inst : TICK_GENERATOR(FALLBACK_NODE_inst.output);
	FALLBACK_NODE_inst : FALLBACK_NODE(TICK_GENERATOR_inst.tick, SEQUENCE_NODE_inst_1.output, ASK_FOR_HELP_inst.to_bt);
	SEQUENCE_NODE_inst_1 : SEQUENCE_NODE(FALLBACK_NODE_inst.to_left_bt, GO_TO_KITCHEN_inst.to_bt, SEQUENCE_NODE_inst_2.output);
	SEQUENCE_NODE_inst_2 : SEQUENCE_NODE(SEQUENCE_NODE_inst_1.to_right_bt, FIND_BOTTLE_inst.to_bt, FETCH_BOTTLE_inst.to_bt);
	GO_TO_KITCHEN_inst : GO_TO_KITCHEN(SEQUENCE_NODE_inst_1.to_left_bt, ROBOT_AND_ENVIRONMENT_inst.is_robot_in_kitchen);
	FIND_BOTTLE_inst : FIND_BOTTLE(SEQUENCE_NODE_inst_2.to_left_bt, ROBOT_AND_ENVIRONMENT_inst.is_bottle_found);
	FETCH_BOTTLE_inst : FETCH_BOTTLE(SEQUENCE_NODE_inst_2.to_right_bt, ROBOT_AND_ENVIRONMENT_inst.is_bottle_fetched);
	ASK_FOR_HELP_inst : ASK_FOR_HELP(FALLBACK_NODE_inst.to_right_bt, ROBOT_AND_ENVIRONMENT_inst.is_help_given);
	ROBOT_AND_ENVIRONMENT_inst : ROBOT_AND_ENVIRONMENT(ASK_FOR_HELP_inst.req_Ask_for_help, FETCH_BOTTLE_inst.req_Fetch_bottle,
                                                           FIND_BOTTLE_inst.req_Find_bottle, GO_TO_KITCHEN_inst.req_Go_to_kitchen);



        LTLSPEC G F (FALLBACK_NODE_inst.output = succeeded);
        --LTLSPEC F FETCH_BOTTLE_inst.req_Fetch_bottle ->  ( ! FETCH_BOTTLE_inst.req_Fetch_bottle U (ROBOT_AND_ENVIRONMENT_inst.is_bottle_found = succeeded  & ! FETCH_BOTTLE_inst.req_Fetch_bottle));
        --LTLSPEC (F (FALLBACK_NODE_inst.output = succeeded) -> ( FALLBACK_NODE_inst.output != succeeded U ((GO_TO_KITCHEN_inst.to_bt=succeeded & FIND_BOTTLE_inst.to_bt=succeeded &  
          --         FETCH_BOTTLE_inst.to_bt=succeeded) &  FALLBACK_NODE_inst.output != succeeded))) |
          --      (F (FALLBACK_NODE_inst.output = succeeded) ->  (FALLBACK_NODE_inst.output != succeeded U (ASK_FOR_HELP_inst.to_bt=succeeded & FALLBACK_NODE_inst.output != succeeded) ));

-- ===============================================================================
--                               End of module
-- ===============================================================================

-- ===============================================================================
MODULE TICK_GENERATOR(from_bt)
    VAR
        tick : {no, enable};

    ASSIGN
      init(tick) := enable;

      next(tick) :=
      	case
                from_bt = none : no;
        	TRUE : enable;
      	esac;


-- ===============================================================================
--                               End of module
-- ===============================================================================

-- ===============================================================================
MODULE FALLBACK_NODE(visit, from_left_bt, from_right_bt)
    VAR
        to_left_bt : {no, enable, disable};
        to_right_bt : {no, enable, disable};
        output : {none, disabled, running, failed, succeeded};
	cached_left : {succeeded, failed, running, disabled, none};
	state : {initial, enabling_left, enabling_right, return_left, return_right,
	         disabling_left, disabling_right};

    ASSIGN
	init(to_left_bt)  := no;
	init(to_right_bt) := no;
	init(output)      := none;
	init(cached_left) := none;
	init(state)       := initial;

	next(to_left_bt) :=
	  case
	    (state = initial & visit = enable) : enable;
	    (state = initial & visit = disable) : disable;
	    (state = enabling_left & (from_left_bt = none | from_left_bt = failed)) : enable;
	    (state = disabling_left & from_left_bt != disabled) : disable;
	    (state = enabling_right) : enable;
	    TRUE : no;
	  esac;

	next(to_right_bt) :=
	  case
	    (state = enabling_left & from_left_bt = failed) : enable;
	    (state = enabling_left & (from_left_bt = running | from_left_bt = succeeded)) : disable;
	    (state = enabling_right): enable;
	    (state = disabling_right & from_right_bt != disabled): disable;
	    TRUE : no;
	  esac;

	next(output) :=
	  case
	    (state = enabling_right & from_right_bt != none) : from_right_bt;
	    (state = disabling_right & from_right_bt = disabled) : cached_left;
	    TRUE : none;
	  esac;

	next(cached_left) :=
	  case
	    (state = enabling_left & (from_left_bt = running | from_left_bt = succeeded)) : from_left_bt;
	    (state = disabling_left & from_left_bt = disabled) : from_left_bt;
	    (state = disabling_right & from_right_bt != disabled) : cached_left;
	    TRUE : none; 
	  esac;

	next(state) :=
	  case
	    (state = initial & visit = enable) : enabling_left;
	    (state = initial & visit = disable) : disabling_left;
	    (state = enabling_left & from_left_bt = failed) : enabling_right;
	    (state = enabling_left & from_left_bt = none) : enabling_left;
	    (state = enabling_left & (from_left_bt = running | from_left_bt = succeeded)) : disabling_right;
	    (state = enabling_right & from_right_bt = none) : enabling_right;
	    (state = enabling_right & from_right_bt != none) : return_right;
	    (state = disabling_right & from_right_bt != disabled) : disabling_right;
	    (state = disabling_right & from_right_bt = disabled) : return_left;
	    (state = disabling_left & from_left_bt != disabled) : disabling_left;
	    (state = disabling_left & from_left_bt = disabled) : disabling_right;
	    TRUE : initial;
	  esac;



-- ===============================================================================
--                               End of module
-- ===============================================================================

-- ===============================================================================
MODULE SEQUENCE_NODE(visit, from_left_bt, from_right_bt)
    VAR
        to_left_bt : {no, enable, disable};
        to_right_bt : {no, enable, disable};
        output : {none, disabled, running, failed, succeeded};
	cached_left : {succeeded, failed, running, disabled, none};
	state : {initial, enabling_left, enabling_right, return_left, return_right,
	         disabling_left, disabling_right};

    ASSIGN
	init(to_left_bt)  := no;
	init(to_right_bt) := no;
	init(output)      := none;
	init(cached_left) := none;
	init(state)       := initial;

	next(to_left_bt) :=
	  case
	    (state = initial & visit = enable) : enable;
	    (state = initial & visit = disable) : disable;
	    (state = enabling_left & (from_left_bt = none | from_left_bt = succeeded)) : enable;
	    (state = enabling_right) : enable;
	    (state = disabling_left & from_left_bt != disabled) : disable;
	    TRUE : no;
	  esac;

	next(to_right_bt) :=
	  case
	    (state = enabling_left & from_left_bt = succeeded) : enable;
	    (state = enabling_left & (from_left_bt = running | from_left_bt = failed)) : disable;
	    (state = enabling_right): enable;
	    (state = disabling_right & from_right_bt != disabled): disable;
	    TRUE : no;
	  esac;

	next(output) :=
	  case
	    (state = enabling_right & from_right_bt != none) : from_right_bt;
	    (state = disabling_right & from_right_bt = disabled) : cached_left;
	    TRUE : none;
	  esac;

	next(cached_left) :=
	  case
	    (state = enabling_left & (from_left_bt = running | from_left_bt = failed)) : from_left_bt;
	    (state = disabling_left & from_left_bt = disabled) : from_left_bt;
	    (state = disabling_right & from_right_bt != disabled) : cached_left;
	    TRUE : none; 
	  esac;

	next(state) :=
	  case
	    (state = initial & visit = enable) : enabling_left;
	    (state = initial & visit = disable) : disabling_left;
	    (state = enabling_left & from_left_bt = succeeded) : enabling_right;
	    (state = enabling_left & from_left_bt = none) : enabling_left;
	    (state = enabling_left & (from_left_bt = running | from_left_bt = failed)) : disabling_right;
	    (state = enabling_right & from_right_bt = none) : enabling_right;
	    (state = enabling_right & from_right_bt != none) : return_right;
	    (state = disabling_right & from_right_bt != disabled) : disabling_right;
	    (state = disabling_right & from_right_bt = disabled) : return_left;
	    (state = disabling_left & from_left_bt != disabled) : disabling_left;
	    (state = disabling_left & from_left_bt = disabled) : disabling_right;
	    TRUE : initial;
	  esac;



-- ===============================================================================
--                               End of module
-- ===============================================================================

-- ===============================================================================
MODULE GO_TO_KITCHEN(from_bt, is_robot_in_kitchen)
    VAR
        to_bt : {none, disabled, running, failed, succeeded};
        req_Go_to_kitchen : boolean;
	state : {away, going, in_kitchen};

    ASSIGN
	init(to_bt) := none;
	init(req_Go_to_kitchen) := FALSE;
	init(state) := away;

	next(to_bt) :=
	  case
	    from_bt = disable : disabled;
	    from_bt = no : none;
	    state = away : running;
	    state = going & is_robot_in_kitchen = succeeded : succeeded;
            state = going & is_robot_in_kitchen = failed : failed;
            state = going & is_robot_in_kitchen = none : running;
	    TRUE: succeeded; -- i.e. state = in_kitchen
	  esac;

	next(req_Go_to_kitchen) := 
	  case
	    from_bt = enable : TRUE;
	    from_bt = disable : FALSE;
	    TRUE : req_Go_to_kitchen;
	  esac;

  	next(state) :=
	  case
	    (state = away & from_bt = enable) : going;
	    state = away : away;
	    (state = going & is_robot_in_kitchen = succeeded) : in_kitchen;
	    (state = going & is_robot_in_kitchen = failed) : away;
	    state = going : going;
	    TRUE: in_kitchen;
    	  esac;

-- ===============================================================================
--                               End of module
-- ===============================================================================

-- ===============================================================================
MODULE FIND_BOTTLE(from_bt, is_bottle_found)
    VAR
        to_bt : {none, disabled, running, failed, succeeded};
        req_Find_bottle : boolean;
	state : {far, finding, near};	

    ASSIGN
	init(to_bt) := none;
	init(req_Find_bottle) := FALSE;
	init(state) := far;

	next(to_bt) :=
	  case
	    from_bt = disable : disabled;
	    from_bt = no : none;
	    state = far : running;
	    state = finding & is_bottle_found = succeeded : succeeded;
            state = finding & is_bottle_found = failed : failed;
            state = finding & is_bottle_found = none : running;
	    TRUE: succeeded; -- i.e. state = near
	  esac;

	next(req_Find_bottle) :=
	  case
	    from_bt = enable : TRUE;
	    from_bt = disable : FALSE;
	    TRUE : req_Find_bottle;
	  esac;

  	next(state) :=
	  case
	    (state = far & from_bt = enable) : finding;
	    state = far : far;
	    (state = finding & is_bottle_found = succeeded) : near;
	    (state = finding & is_bottle_found = failed) : far;
	    state = finding : finding;
	    TRUE: near;
	  esac;



-- ===============================================================================
--                               End of module
-- ===============================================================================

-- ===============================================================================
MODULE FETCH_BOTTLE(from_bt, is_bottle_fetched)
    VAR
        to_bt : {none, disabled, running, failed, succeeded};
        req_Fetch_bottle : boolean;
	state : {not_grasped, fetching, grasped};

    ASSIGN
	init(to_bt) := none;
	init(req_Fetch_bottle) := FALSE;
	init(state) := not_grasped;

	next(to_bt) :=
	  case
	    from_bt = disable : disabled;
	    from_bt = no : none;
	    state = not_grasped : running;
	    state = fetching & is_bottle_fetched = succeeded : succeeded;
            state = fetching & is_bottle_fetched = failed : failed;
            state = fetching & is_bottle_fetched = none : running;
	    TRUE: succeeded; -- i.e. state = grasped
	  esac;

	next(req_Fetch_bottle) :=
	  case
	    from_bt = enable : TRUE;
	    from_bt = disable : FALSE;
	    TRUE : req_Fetch_bottle;
	  esac;

  	next(state) :=
	  case
	    (state = not_grasped & from_bt = enable) : fetching;
	    state = not_grasped : not_grasped;
	    (state = fetching & is_bottle_fetched = succeeded) : grasped;
	    (state = fetching & is_bottle_fetched = failed) : not_grasped;
	    state = fetching : fetching;
	    TRUE: grasped;
	  esac;




-- ===============================================================================
--                               End of module
-- ===============================================================================

-- ===============================================================================
MODULE ASK_FOR_HELP(from_bt, is_help_given)
    VAR
        to_bt : {none, disabled, running, failed, succeeded};
        req_Ask_for_help : boolean;
	state : {not_asked, asking, asked};	

    ASSIGN
	init(to_bt) := none;
	init(req_Ask_for_help) := FALSE;
	init(state) := not_asked;

	next(to_bt) :=
	  case
	    from_bt = disable : disabled;
	    from_bt = no : none;
	    state = not_asked : running;
	    state = asking & is_help_given = succeeded : succeeded;
            state = asking & is_help_given = failed : failed;
            state = asking & is_help_given = none : running;
	    TRUE: succeeded; -- i.e. state = asked
	  esac;

	next(req_Ask_for_help) :=
	  case
	    from_bt = enable : TRUE;
	    from_bt = disable : FALSE;
	    TRUE : req_Ask_for_help;
	  esac;

  	next(state) :=
	  case
	    (state = not_asked & from_bt = enable) : asking;
	    state = not_asked : not_asked;
	    (state = asking & is_help_given = succeeded) : asked;
	    (state = asking & is_help_given = failed) : not_asked;
	    state = asking : asking;
	    TRUE: asked;
	  esac;


-- ===============================================================================
--                               End of module
-- ===============================================================================

-- ===============================================================================
MODULE ROBOT_AND_ENVIRONMENT(req_Ask_for_help, req_Fetch_bottle, req_Find_bottle, req_Go_to_kitchen)
    VAR
        is_help_given : {none, failed, succeeded};
        is_bottle_fetched : {none, failed, succeeded};
        is_bottle_found : {none, failed, succeeded};
        is_robot_in_kitchen : {none, failed, succeeded};
	state : {stand_by, in_kitchen, bottle_found, bottle_fetched,
	         help_stand_by, help_kitchen, help_found, help_fetched,
		 failed_kitchen, failed_find, failed_fetch};
	
    INVAR
      (state = in_kitchen -> is_robot_in_kitchen = succeeded) &
      (state = failed_kitchen -> is_robot_in_kitchen = failed) &
      (state = bottle_found -> is_bottle_found = succeeded) &
      (state = failed_find -> is_bottle_found = failed) &
      (state = bottle_fetched -> is_bottle_fetched = succeeded) &
      (state = failed_fetch -> is_bottle_fetched = failed);

    ASSIGN
      init(is_robot_in_kitchen) := none;
      init(is_bottle_found) := none;
      init(is_bottle_fetched) := none;
      init(is_help_given) := none;
      init(state) := stand_by;

      next(is_robot_in_kitchen) :=
        case
	  (state = stand_by & req_Go_to_kitchen & !req_Ask_for_help) :  {succeeded, failed}; --succeeded;--
	  (state = stand_by & !req_Go_to_kitchen & !req_Ask_for_help) : none;
	  (state = stand_by & req_Ask_for_help) : none;
	  (state = failed_kitchen & req_Go_to_kitchen & !req_Ask_for_help) : failed;
	  (state = failed_kitchen & !req_Go_to_kitchen & !req_Ask_for_help) : none;
	  (state = failed_kitchen & req_Ask_for_help) : none;
	  (state = help_stand_by) : none;
	  TRUE : succeeded;
	esac;

      next(is_bottle_found) :=
        case
	  (state = stand_by) : none;
	  (state = failed_kitchen) : none;
	  (state = help_stand_by) : none;
	  (state = in_kitchen & req_Find_bottle & !req_Ask_for_help) :  {succeeded, failed}; -- succeeded;--
	  (state = in_kitchen & !req_Find_bottle & !req_Ask_for_help) : none;
	  (state = in_kitchen & req_Ask_for_help) : none;
	  (state = failed_find & req_Find_bottle & !req_Ask_for_help) : failed;
	  (state = failed_find & !req_Find_bottle & !req_Ask_for_help) : none;
	  (state = failed_find & req_Ask_for_help) : none;
	  (state = help_kitchen) : none;
	  TRUE : succeeded;
	esac;

      next(is_bottle_fetched) :=
        case
	  (state = bottle_found & req_Fetch_bottle & !req_Ask_for_help) :  {succeeded, failed}; --  succeeded;--
	  (state = failed_fetch & req_Fetch_bottle & !req_Ask_for_help) : failed;
	  (state = bottle_fetched) : succeeded;
	  (state = help_fetched) : succeeded;
	  TRUE : none;
	esac;

      next(is_help_given) :=
        case
	  req_Ask_for_help : succeeded;	  
	  TRUE : none;
	esac;

      next(state) :=
        case
	  (state = stand_by & req_Go_to_kitchen & !req_Ask_for_help) : {in_kitchen, failed_kitchen}; -- in_kitchen;--
	  (state = stand_by & req_Ask_for_help) : help_stand_by;
	  (state = help_stand_by & !req_Ask_for_help) : stand_by;
	  (state = failed_kitchen & !req_Go_to_kitchen & !req_Ask_for_help) : stand_by;
	  (state = failed_kitchen & req_Ask_for_help) : help_stand_by;

	  (state = in_kitchen & req_Find_bottle & !req_Ask_for_help) : {bottle_found, failed_find}; -- bottle_found;--
	  (state = in_kitchen & req_Ask_for_help) : help_kitchen;
  	  (state = help_kitchen & !req_Ask_for_help) : in_kitchen;
	  (state = failed_find & !req_Find_bottle & !req_Ask_for_help) : in_kitchen;
	  (state = failed_find & req_Ask_for_help) : help_kitchen;

	  (state = bottle_found & req_Fetch_bottle & !req_Ask_for_help) :  {bottle_fetched, failed_fetch}; -- bottle_fetched; --
	  (state = bottle_found & req_Ask_for_help) : help_found;
    	  (state = help_found & !req_Ask_for_help) : bottle_found;	
	  (state = failed_fetch & !req_Fetch_bottle & !req_Ask_for_help) : bottle_found;
	  (state = failed_fetch & req_Ask_for_help) : help_found;

	  (state = failed_find & req_Ask_for_help) : help_fetched;
    	  (state = help_fetched & !req_Ask_for_help) : bottle_fetched;
	  
	  TRUE : state;
	esac;

-- ===============================================================================
--                               End of module
-- ===============================================================================
