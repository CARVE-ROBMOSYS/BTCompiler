
-- ===============================================================================
MODULE main
    VAR
        FIND_BOTTLE_inst : FIND_BOTTLE(from_bt, is_bottle_found);
    VAR
        from_bt : {disable, enable, no};
        is_bottle_found : {none, failed, succeeded};

    DEFINE
        to_bt := FIND_BOTTLE_inst.to_bt;
        req_Find_bottle := FIND_BOTTLE_inst.req_Find_bottle;


-- ===============================================================================
--                               End of module
-- ===============================================================================

-- ===============================================================================
MODULE FIND_BOTTLE(from_bt, is_bottle_found)
    VAR
        to_bt : {none, disabled, running, failed, succeeded};
        req_Find_bottle : boolean;
	state : {far, finding, failing, near, disabled_far, disabled_near};	

    ASSIGN
	init(to_bt) := none;
	init(req_Find_bottle) := FALSE;
	init(state) := far;

	next(to_bt) :=
	  case
	    (state = far & from_bt = enable) : running;
	    (state = far & from_bt = disable) : disabled;
	    (state = finding & ((from_bt = enable | from_bt = no) & is_bottle_found = none)) : running;
	    (state = finding & ((from_bt = enable | from_bt = no) & is_bottle_found = succeeded)) : succeeded;
	    (state = finding & from_bt = disable): disabled;
	    (state = finding & ((from_bt = enable | from_bt = no) & is_bottle_found = failed)) : failed;
	    (state = failing & from_bt = enable) : running;
	    (state = failing & from_bt = no) : failed;
	    (state = failing & from_bt = disable): disabled;
	    (state = near & (from_bt = no | from_bt = enable) & is_bottle_found != failed) : succeeded;
	    (state = near & (from_bt = no | from_bt = enable) & is_bottle_found = failed) : failed;
	    (state = near & from_bt = disable) : disabled;
	    (state = disabled_far & from_bt = disable) : disabled;
	    (state = disabled_far & from_bt = enable) : running;
	    (state = disabled_near & from_bt = disable) : disabled;
	    (state = disabled_near & from_bt = enable) : running;
	    (state = disabled_near & from_bt = no) : succeeded;	
	    TRUE: none;
	  esac;

	next(req_Find_bottle) :=
	  case
	    (state = far & from_bt = enable) : TRUE;
	    (state = finding & ((from_bt = enable | from_bt = no) & is_bottle_found = none)) : TRUE;
	    (state = failing & from_bt = enable) : TRUE;
	    (state = disabled_far & from_bt = enable) : TRUE;
	    (state = near & from_bt = enable): TRUE;
	    (state = disabled_near & from_bt = enable) : TRUE;
	    TRUE: FALSE;
	  esac;

  	next(state) :=
	  case
	    (state = far & from_bt = enable) : finding;
	    (state = far & from_bt = disable) : disabled_far;
	    (state = finding & ((from_bt = enable | from_bt = no) & is_bottle_found = none)) : finding;
	    (state = finding & ((from_bt = enable | from_bt = no) & is_bottle_found = succeeded)) : near;
	    (state = finding & ((from_bt = enable | from_bt = no) & is_bottle_found = failed)) : failing;
	    (state = finding & from_bt = disable & is_bottle_found != succeeded): disabled_far;
    	    (state = finding & from_bt = disable & is_bottle_found = succeeded): disabled_near;
	    (state = failing & from_bt = enable) : finding;
	    (state = failing & from_bt = no) : failing;
	    (state = failing & from_bt = disable & is_bottle_found != succeeded): disabled_far;
    	    (state = failing & from_bt = disable & is_bottle_found = succeeded): disabled_near;
    	    (state = near &  (from_bt = no | from_bt = enable) & is_bottle_found != failed) : near;	
	    (state = near &  (from_bt = no | from_bt = enable) & is_bottle_found = failed) : failing;
	    (state = near & from_bt = disable) : disabled_near;
	    (state = disabled_far & from_bt = disable) : disabled_far;
	    (state = disabled_far & from_bt = enable) : finding;
	    (state = disabled_near & from_bt = disable) : disabled_near;
	    (state = disabled_near & from_bt = no) : near;
    	    (state = disabled_near & from_bt = enable) : finding;
	    TRUE: far;
	  esac;


-- ===============================================================================
--                               End of module
-- ===============================================================================
