
-- ===============================================================================
MODULE main
    VAR
        ROBOT_AND_ENVIRONMENT_inst : ROBOT_AND_ENVIRONMENT(req_Ask_for_help, req_Find_bottle, req_Go_to_kitchen);
    VAR
        req_Ask_for_help : boolean;
        req_Find_bottle : boolean;
        req_Go_to_kitchen : boolean;

    DEFINE
        is_help_given := ROBOT_AND_ENVIRONMENT_inst.is_help_given;
        is_bottle_found := ROBOT_AND_ENVIRONMENT_inst.is_bottle_found;
        is_robot_in_kitchen := ROBOT_AND_ENVIRONMENT_inst.is_robot_in_kitchen;


-- ===============================================================================
--                               End of module
-- ===============================================================================

-- ===============================================================================
MODULE ROBOT_AND_ENVIRONMENT(req_Ask_for_help, req_Find_bottle, req_Go_to_kitchen)
    VAR
        is_help_given : {none, failed, succeeded};
        is_bottle_found : {none, failed, succeeded};
        is_robot_in_kitchen : {none, failed, succeeded};
	state : {stand_by, in_kitchen, bottle_found, 
	         help_stand_by, help_kitchen, help_found, 
		 failed_kitchen, failed_find};
	
    INVAR
      (state = in_kitchen -> is_robot_in_kitchen = succeeded) &
      (state = failed_kitchen -> is_robot_in_kitchen = failed) &
      (state = bottle_found -> is_bottle_found = succeeded) &
      (state = failed_find -> is_bottle_found = failed) ;

    ASSIGN
      init(is_robot_in_kitchen) := none;
      init(is_bottle_found) := none;
      init(is_help_given) := none;
      init(state) := stand_by;

      next(is_robot_in_kitchen) :=
        case
	  (state = stand_by & req_Go_to_kitchen & !req_Ask_for_help) : {succeeded, failed};
	  (state = stand_by & !req_Go_to_kitchen & !req_Ask_for_help) : none;
	  (state = stand_by & req_Ask_for_help) : none;
	  (state = failed_kitchen & req_Go_to_kitchen & !req_Ask_for_help) : failed;
	  (state = failed_kitchen & !req_Go_to_kitchen & !req_Ask_for_help) : none;
	  (state = failed_kitchen & req_Ask_for_help) : none;
	  (state = help_stand_by) : none;
	  TRUE : succeeded;
	esac;

      next(is_bottle_found) :=
        case
	  (state = stand_by) : none;
	  (state = failed_kitchen) : none;
	  (state = help_stand_by) : none;
	  (state = in_kitchen & req_Find_bottle & !req_Ask_for_help) : {succeeded, failed};
	  (state = in_kitchen & !req_Find_bottle & !req_Ask_for_help) : none;
	  (state = in_kitchen & req_Ask_for_help) : none;
	  (state = failed_find & req_Find_bottle & !req_Ask_for_help) : failed;
	  (state = failed_find & !req_Find_bottle & !req_Ask_for_help) : none;
	  (state = failed_find & req_Ask_for_help) : none;
	  (state = help_kitchen) : none;
	  TRUE : succeeded;
	esac;

 

      next(is_help_given) :=
        case
	  req_Ask_for_help : succeeded;	  
	  TRUE : none;
	esac;

      next(state) :=
        case
	  (state = stand_by & req_Go_to_kitchen & !req_Ask_for_help) : {in_kitchen, failed_kitchen};
	  (state = stand_by & req_Ask_for_help) : help_stand_by;
	  (state = help_stand_by & !req_Ask_for_help) : stand_by;
	  (state = failed_kitchen & !req_Go_to_kitchen & !req_Ask_for_help) : stand_by;
	  (state = failed_kitchen & req_Ask_for_help) : help_stand_by;

	  (state = in_kitchen & req_Find_bottle & !req_Ask_for_help) : {bottle_found, failed_find};
	  (state = in_kitchen & req_Ask_for_help) : help_kitchen;
  	  (state = help_kitchen & !req_Ask_for_help) : in_kitchen;
	  (state = failed_find & !req_Find_bottle & !req_Ask_for_help) : in_kitchen;
	  (state = failed_find & req_Ask_for_help) : help_kitchen;

	  (state = bottle_found & req_Ask_for_help) : help_found;
    	  (state = help_found & !req_Ask_for_help) : bottle_found;	
	  
	  TRUE : state;
	esac;

-- ===============================================================================
--                               End of module
-- ===============================================================================
