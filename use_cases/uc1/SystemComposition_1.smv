
-- ===============================================================================
MODULE main
    VAR
        TICK_GENERATOR_inst : TICK_GENERATOR;
	FALLBACK_NODE_inst : FALLBACK_NODE(TICK_GENERATOR_inst.tick, GO_TO_KITCHEN_inst.to_bt, ASK_FOR_HELP_inst.to_bt);
	GO_TO_KITCHEN_inst : GO_TO_KITCHEN(FALLBACK_NODE_inst.to_left_bt, ROBOT_AND_ENVIRONMENT_inst.is_robot_in_kitchen);
	ASK_FOR_HELP_inst : ASK_FOR_HELP(FALLBACK_NODE_inst.to_right_bt, ROBOT_AND_ENVIRONMENT_inst.is_help_given);
	ROBOT_AND_ENVIRONMENT_inst : ROBOT_AND_ENVIRONMENT(ASK_FOR_HELP_inst.req_Ask_for_help,  GO_TO_KITCHEN_inst.req_Go_to_kitchen);

        LTLSPEC G F (FALLBACK_NODE_inst.output = succeeded);

-- ===============================================================================
--                               End of module
-- ===============================================================================

-- ===============================================================================
MODULE TICK_GENERATOR
    VAR
        tick : {no, enable, disable};

    ASSIGN
      init(tick) := enable;

      next(tick) := enable;


-- ===============================================================================
--                               End of module
-- ===============================================================================

-- ===============================================================================
MODULE FALLBACK_NODE(visit, from_left_bt, from_right_bt)
    VAR
        to_left_bt : {no, enable, disable};
        to_right_bt : {no, enable, disable};
        output : {none, disabled, running, failed, succeeded};
	cached_left : {succeeded, failed, running, disabled, none};
	state : {initial, enabling_left, enabling_right, return_left, return_right,
	         disabling_left, disabling_right};

    ASSIGN
	init(to_left_bt)  := no;
	init(to_right_bt) := no;
	init(output)      := none;
	init(cached_left) := none;
	init(state)       := initial;

	next(to_left_bt) :=
	  case
	    (state = initial & visit = enable) : enable;
	    (state = initial & visit = disable) : disable;
	    (state = enabling_left & from_left_bt = none) : enable;
	    (state = disabling_left & from_left_bt != disabled) : disable;
	    TRUE : no;
	  esac;

	next(to_right_bt) :=
	  case
	    (state = enabling_left & from_left_bt = failed) : enable;
	    (state = enabling_left & (from_left_bt = running | from_left_bt = succeeded)) : disable;
	    (state = enabling_right & from_right_bt = none): enable;
	    (state = disabling_right & from_right_bt != disable): disable;
	    TRUE : no;
	  esac;

	next(output) :=
	  case
	    (state = initial & visit = enable) : running;
	    (state = enabling_left & (from_left_bt = failed | from_left_bt = none)) : running;
	    (state = enabling_right & from_right_bt != none) : from_right_bt;
	    (state = enabling_right & from_right_bt = none) : running;
	    (state = disabling_right & from_right_bt = disabled) : cached_left;
	    TRUE : none;
	  esac;

	next(cached_left) :=
	  case
	    (state = enabling_left & (from_left_bt = running | from_left_bt = succeeded)) : from_left_bt;
	    (state = disabling_left & from_left_bt = disabled) : from_left_bt;
	    (state = disabling_right & from_right_bt != disabled) : cached_left;
	    TRUE : none; 
	  esac;

	next(state) :=
	  case
	    (state = initial & visit = enable) : enabling_left;
	    (state = initial & visit = disable) : disabling_left;
	    (state = enabling_left & from_left_bt = failed) : enabling_right;
	    (state = enabling_left & from_left_bt = none) : enabling_left;
	    (state = enabling_left & (from_left_bt = running | from_left_bt = succeeded)) : disabling_right;
	    (state = enabling_right & from_right_bt = none) : enabling_right;
	    (state = enabling_right & from_right_bt != none) : return_right;
	    (state = disabling_right & from_right_bt != disabled) : disabling_right;
	    (state = disabling_right & from_right_bt = disabled) : return_left;
	    (state = disabling_left & from_left_bt != disabled) : disabling_left;
	    (state = disabling_left & from_left_bt = disabled) : disabling_right;
	    TRUE : initial;
	  esac;



-- ===============================================================================
--                               End of module
-- ===============================================================================
-- ===============================================================================
MODULE GO_TO_KITCHEN(from_bt, is_robot_in_kitchen)
    VAR
        to_bt : {none, disabled, running, failed, succeeded};
        req_Go_to_kitchen : boolean;
	state : {away, going, failing, in_kitchen, disabled_away, disabled_in_kitchen};

    ASSIGN
	init(to_bt) := none;
	init(req_Go_to_kitchen) := FALSE;
	init(state) := away;

	next(to_bt) :=
	  case
	    (state = away & from_bt = enable) : running;
	    (state = away & from_bt = disable) : disabled;
	    (state = going & ((from_bt = enable | from_bt = no) & is_robot_in_kitchen = none)) : running;
	    (state = going & ((from_bt = enable | from_bt = no) & is_robot_in_kitchen = succeeded)) : succeeded;
	    (state = going & from_bt = disable): disabled;
	    (state = going & ((from_bt = enable | from_bt = no) & is_robot_in_kitchen = failed)) : failed;
	    (state = failing & from_bt = enable) : running;
	    (state = failing & from_bt = no) : failed;
	    (state = failing & from_bt = disable): disabled;
	    (state = in_kitchen & from_bt = enable) : running;
	    (state = in_kitchen & from_bt = no) : succeeded;
	    (state = in_kitchen & from_bt = disable) : disabled;
	    (state = disabled_away & from_bt = disable) : disabled;
	    (state = disabled_away & from_bt = enable) : running;
	    (state = disabled_in_kitchen & from_bt = disable) : disabled;
	    (state = disabled_in_kitchen & from_bt = enable) : running;
	    (state = disabled_in_kitchen & from_bt = no) : succeeded;	
	    TRUE: none;
	  esac;

	next(req_Go_to_kitchen) :=
	  case
	    (state = away & from_bt = enable) : TRUE;
	    (state = going & ((from_bt = enable | from_bt = no) & is_robot_in_kitchen = none)) : TRUE;
	    (state = failing & from_bt = enable) : TRUE;
	    (state = disabled_away & from_bt = enable) : TRUE;
	    (state = in_kitchen & from_bt = enable): TRUE;
	    (state = disabled_in_kitchen & from_bt = enable) : TRUE;
	    TRUE: FALSE;
	  esac;

  	next(state) :=
	  case
	    (state = away & from_bt = enable) : going;
	    (state = away & from_bt = disable) : disabled_away;
	    (state = going & ((from_bt = enable | from_bt = no) & is_robot_in_kitchen = none)) : going;
	    (state = going & ((from_bt = enable | from_bt = no) & is_robot_in_kitchen = succeeded)) : in_kitchen;
	    (state = going & ((from_bt = enable | from_bt = no) & is_robot_in_kitchen = failed)) : failing;
	    (state = going & from_bt = disable & is_robot_in_kitchen != succeeded): disabled_away;
    	    (state = going & from_bt = disable & is_robot_in_kitchen = succeeded): disabled_in_kitchen;
	    (state = failing & from_bt = enable) : going;
	    (state = failing & from_bt = no) : failing;
	    (state = failing & from_bt = disable & is_robot_in_kitchen != succeeded): disabled_away;
    	    (state = failing & from_bt = disable & is_robot_in_kitchen = succeeded): disabled_in_kitchen;
	    (state = in_kitchen & from_bt = enable) : going;
    	    (state = in_kitchen & from_bt = no) : in_kitchen;	
	    (state = in_kitchen & from_bt = disable) : disabled_in_kitchen;
	    (state = disabled_away & from_bt = disable) : disabled_away;
	    (state = disabled_away & from_bt = enable) : going;
	    (state = disabled_in_kitchen & from_bt = disable) : disabled_in_kitchen;
	    (state = disabled_in_kitchen & from_bt = no) : in_kitchen;
    	    (state = disabled_in_kitchen & from_bt = enable) : going;
	    TRUE: away;
	  esac;

-- ===============================================================================
--                               End of module
-- ===============================================================================

-- ===============================================================================
MODULE ASK_FOR_HELP(from_bt, is_help_given)
    VAR
        to_bt : {none, disabled, running, failed, succeeded};
        req_Ask_for_help : boolean;
	state : {not_asked, asking, failing, asked, disabled_not_asked, disabled_asked};	

    ASSIGN
	init(to_bt) := none;
	init(req_Ask_for_help) := FALSE;
	init(state) := not_asked;

	next(to_bt) :=
	  case
	    (state = not_asked & from_bt = enable) : running;
	    (state = not_asked & from_bt = disable) : disabled;
	    (state = asking & ((from_bt = enable | from_bt = no) & is_help_given = none)) : running;
	    (state = asking & ((from_bt = enable | from_bt = no) & is_help_given = succeeded)) : succeeded;
	    (state = asking & from_bt = disable): disabled;
	    (state = asking & ((from_bt = enable | from_bt = no) & is_help_given = failed)) : failed;
	    (state = failing & from_bt = enable) : running;
	    (state = failing & from_bt = no) : failed;
	    (state = failing & from_bt = disable): disabled;
	    (state = asked & from_bt = enable) : running;
	    (state = asked & from_bt = no) : succeeded;
	    (state = asked & from_bt = disable) : disabled;
	    (state = disabled_not_asked & from_bt = disable) : disabled;
	    (state = disabled_not_asked & from_bt = enable) : running;
	    (state = disabled_asked & from_bt = disable) : disabled;
	    (state = disabled_asked & from_bt = enable) : running;
	    (state = disabled_asked & from_bt = no) : succeeded;	
	    TRUE: none;
	  esac;

	next(req_Ask_for_help) :=
	  case
	    (state = not_asked & from_bt = enable) : TRUE;
	    (state = asking & ((from_bt = enable | from_bt = no) & is_help_given = none)) : TRUE;
	    (state = failing & from_bt = enable) : TRUE;
	    (state = disabled_not_asked & from_bt = enable) : TRUE;
	    (state = asked & from_bt = enable): TRUE;
	    (state = disabled_asked & from_bt = enable) : TRUE;
	    TRUE: FALSE;
	  esac;

  	next(state) :=
	  case
	    (state = not_asked & from_bt = enable) : asking;
	    (state = not_asked & from_bt = disable) : disabled_not_asked;
	    (state = asking & ((from_bt = enable | from_bt = no) & is_help_given = none)) : asking;
	    (state = asking & ((from_bt = enable | from_bt = no) & is_help_given = succeeded)) : asked;
	    (state = asking & ((from_bt = enable | from_bt = no) & is_help_given = failed)) : failing;
	    (state = asking & from_bt = disable & is_help_given != succeeded): disabled_not_asked;
    	    (state = asking & from_bt = disable & is_help_given = succeeded): disabled_asked;
	    (state = failing & from_bt = enable) : asking;
	    (state = failing & from_bt = no) : failing;
	    (state = failing & from_bt = disable & is_help_given != succeeded): disabled_not_asked;
    	    (state = failing & from_bt = disable & is_help_given = succeeded): disabled_asked;
	    (state = asked & from_bt = enable) : asking;
    	    (state = asked & from_bt = no) : asked;	
	    (state = asked & from_bt = disable) : disabled_asked;
	    (state = disabled_not_asked & from_bt = disable) : disabled_not_asked;
	    (state = disabled_not_asked & from_bt = enable) : asking;
	    (state = disabled_asked & from_bt = disable) : disabled_asked;
	    (state = disabled_asked & from_bt = no) : asked;
    	    (state = disabled_asked & from_bt = enable) : asking;
	    TRUE: not_asked;
	  esac;


-- ===============================================================================
--                               End of module
-- ===============================================================================

-- ===============================================================================
MODULE ROBOT_AND_ENVIRONMENT(req_Ask_for_help, req_Go_to_kitchen)
    VAR
        is_help_given : {none, failed, succeeded};
        is_robot_in_kitchen : {none, failed, succeeded};
	state : {stand_by, in_kitchen, help_stand_by, help_kitchen, failed_kitchen};
	
    INVAR
      (state = in_kitchen -> is_robot_in_kitchen = succeeded) &
      (state = failed_kitchen -> is_robot_in_kitchen = failed);

    ASSIGN
      init(is_robot_in_kitchen) := none;
      init(is_help_given) := none;
      init(state) := stand_by;

      next(is_robot_in_kitchen) :=
        case
	  (state = stand_by & req_Go_to_kitchen & !req_Ask_for_help) : {succeeded, failed};
	  (state = stand_by & !req_Go_to_kitchen & !req_Ask_for_help) : none;
	  (state = stand_by & req_Ask_for_help) : none;
	  (state = failed_kitchen & req_Go_to_kitchen & !req_Ask_for_help) : failed;
	  (state = failed_kitchen & !req_Go_to_kitchen & !req_Ask_for_help) : none;
	  (state = failed_kitchen & req_Ask_for_help) : none;
	  (state = help_stand_by) : none;
	  TRUE : succeeded;
	esac;


      next(is_help_given) :=
        case
	  req_Ask_for_help : succeeded;	  
	  TRUE : none;
	esac;

      next(state) :=
        case
	  (state = stand_by & req_Go_to_kitchen & !req_Ask_for_help) : {in_kitchen, failed_kitchen};
	  (state = stand_by & req_Ask_for_help) : help_stand_by;
	  (state = help_stand_by & !req_Ask_for_help) : stand_by;
	  (state = failed_kitchen & !req_Go_to_kitchen & !req_Ask_for_help) : stand_by;
	  (state = failed_kitchen & req_Ask_for_help) : help_stand_by;

	
	  (state = in_kitchen & req_Ask_for_help) : help_kitchen;
  	  (state = help_kitchen & !req_Ask_for_help) : in_kitchen;

	  
	  TRUE : state;
	esac;

-- ===============================================================================
--                               End of module
-- ===============================================================================
