@requires discrete-time
COMPONENT uc1 system
 INTERFACE
  OUTPUT PORT output: {none, disabled, running, failed, succeeded};

  CONTRACT mission
   assume: true;
   guarantee: (always in the future (output = succeeded)) and 
              (in the future Fetch_bottle.req_Fetch_bottle ->  (!Fetch_bottle.req_Fetch_bottle until (Robot_env.is_bottle_found = succeeded  and !Fetch_bottle.req_Fetch_bottle))) and
	      ((in the future output = succeeded -> (output != succeeded until (Go_to_kitchen.to_bt = succeeded and
		                                                                Find_bottle.to_bt = succeeded and
									        Fetch_bottle.to_bt = succeeded) and  output != succeeded)) or
 	       (in the future output = succeeded -> (output != succeeded until (Ask_for_help.to_bt = succeeded and output != succeeded))));

 REFINEMENT
  SUB Tick_generator: TICK_GENERATOR;
  SUB Fallback_node: FALLBACK_NODE;
  SUB Sequence_node_1: SEQUENCE_NODE;
  SUB Sequence_node_2: SEQUENCE_NODE;

  SUB Bt_fsm: BT_FSM;
  SUB Robot_env: ROBOT_AND_ENVIRONMENT;
  SUB Go_to_kitchen: GO_TO_KITCHEN;
  SUB Find_bottle: FIND_BOTTLE;
  SUB Fetch_bottle: FETCH_BOTTLE;
  SUB Ask_for_help: ASK_FOR_HELP;
  
  CONNECTION Bt_fsm.visit := Tick_generator.tick;

  CONNECTION Bt_fsm.from_Go_to_kitchen := Go_to_kitchen.to_bt;
  CONNECTION Go_to_kitchen.from_bt := Bt_fms.to_Go_to_kitchen;
  CONNECTION Robot_env.req_Go_to_kitchen := Go_to_kitchen.req_Go_to_kitchen;
  CONNECTION Go_to_kitchen.is_robot_in_kitchen := Robot_env.is_robot_in_kitchen;

  CONNECTION Bt_fsm.from_Find_bottle := Find_bottle.to_bt;
  CONNECTION Find_bottle.from_bt := Bt_fsm.to_Find_bottle;
  CONNECTION Robot_env.req_Find_bottle := Find_bottle.req_Find_bottle;
  CONNECTION Find_bottle.is_bottle_found := Robot_env.is_bottle_found;

  CONNECTION Bt_fsm.from_Fetch_bottle := Fetch_bottle.to_bt;
  CONNECTION Fetch_bottle.from_bt := Bt_fsm.to_Fetch_bottle;
  CONNECTION Robot_env.req_Fetch_bottle := Fetch_bottle.req_Fetch_bottle;
  CONNECTION Fetch_bottle.is_bottle_fetched := Robot_env.is_bottle_fetched;

  CONNECTION Bt_fsm.from_Ask_for_help := Ask_for_help.to_bt;
  CONNECTION Ask_for_help.from_bt := Bt_fsm.to_Ask_for_help;
  CONNECTION Robot_env.req_Ask_for_help := Ask_for_help.req_Ask_for_help;
  CONNECTION Ask_for_help.is_help_given := Robot_env.is_help_given;

  CONNECTION output := Bt_fsm.output;

  CONTRACT mission REFINEDBY Tick_generator.tick_contract , Bt_fsm.bt_fsm_contract, Robot_env.env_contract,
                             Go_to_kitchen.skill_contract, Find_bottle.skill_contract, Fetch_bottle.skill_contract, Ask_for_help.skill_contract;

COMPONENT TICK_GENERATOR
  INTERFACE
    OUTPUT PORT tick: {no, enable, disable};
  CONTRACT tick_contract
    assume: true;
    guarantee: tick=enable and always tick=enable;

COMPONENT BT_FSM
 INTERFACE
  INPUT PORT visit: {no, enable, disable};
  INPUT PORT from_Go_to_kitchen: {none, disabled, running, failed, succeeded};
  INPUT PORT from_Find_bottle: {none, disabled, running, failed, succeeded};
  INPUT PORT from_Fetch_bottle: {none, disabled, running, failed, succeeded};
  INPUT PORT from_Ask_for_help: {none, disabled, running, failed, succeeded}
  OUTPUT PORT to_Go_to_kitchen: {no, enable, disable};
  OUTPUT PORT to_Find_bottle: {no, enable, disable};
  OUTPUT PORT to_Fetch_bottle: {no, enable, disable};
  OUTPUT PORT to_Ask_for_help: {no, enable, disable};
  OUTPUT PORT output: {none, disabled, running, failed, succeeded};
  CONTRACT bt_fsm_contract
   assume: true;
   guarantee: true;

COMPONENT GO_TO_KITCHEN
 INTERFACE
  INPUT PORT from_bt: {no, enable, disable};
  INPUT PORT is_robot_in_kitchen: {none, failed, succeeded};
  OUTPUT PORT to_bt: {none, disabled, running, failed, succeeded};
  OUTPUT PORT req_Go_to_kitchen: boolean;
  CONTRACT skill_contract
   assume: true;
   guarantee: (always (from_bt = enable -> in the future (to_bt != none and to_bt != disabled))) and
   	      (always (from_bt = disable -> in the future to_bt = disabled)) and
	      (always (from_bt = enable -> in the future req_Go_to_kitchen)) and
	      (always (from_bt != enable -> never req_Go_to_kitchen)) and
	      ((always from_bt = no) -> (always to_bt = none)) and
	      (always (from_bt != enable -> always (to_bt != succeeded)));

COMPONENT FIND_BOTTLE
 INTERFACE
  INPUT PORT from_bt: {no, enable, disable};
  INPUT PORT is_bottle_found: {none, failed, succeeded};
  OUTPUT PORT to_bt: {none, disabled, running, failed, succeeded};
  OUTPUT PORT req_Find_bottle: boolean;
  CONTRACT skill_contract
   assume: true; 
   guarantee: (always (from_bt = enable -> in the future (to_bt != none and to_bt != disabled))) and
   	      (always (from_bt = disable -> in the future to_bt = disabled)) and
	      (always (from_bt = enable -> in the future req_Find_bottle)) and
	      (always (from_bt != enable -> never req_Find_bottle)) and	
	      ((always from_bt = no) -> (always to_bt = none)) and
	      (always (from_bt != enable -> always (to_bt != succeeded)));

COMPONENT FETCH_BOTTLE
 INTERFACE
  INPUT PORT from_bt: {no, enable, disable};
  INPUT PORT is_bottle_fetched: {none, failed, succeeded};
  OUTPUT PORT to_bt: {none, disabled, running, failed, succeeded};
  OUTPUT PORT req_Fetch_bottle: boolean;
  CONTRACT skill_contract
   assume: true; 
   guarantee: (always (from_bt = enable -> in the future (to_bt != none and to_bt != disabled))) and
              (always (from_bt = disable -> in the future to_bt = disabled)) and
	      (always (from_bt = enable -> in the future req_Find_bottle)) and
	      (always (from_bt != enable -> never req_Find_bottle)) and	
	      ((always from_bt = no) -> (always to_bt = none)) and
	      (always (from_bt != enable -> always (to_bt != succeeded)));

COMPONENT ASK_FOR_HELP
 INTERFACE
  INPUT PORT from_bt: {no, enable, disable};
  INPUT PORT is_help_given: {none, failed, succeeded};
  OUTPUT PORT to_bt: {none, disabled, running, failed, succeeded};
  OUTPUT PORT req_Ask_for_help: boolean;
  CONTRACT skill_contract
   assume: true; 
   guarantee: (always (from_bt = enable -> in the future (to_bt != none and to_bt != disabled))) and
   	      (always (from_bt = disable -> in the future to_bt = disabled)) and
	      (always (from_bt = enable -> in the future req_Ask_for_help)) and
	      (always (from_bt != enable -> never req_Ask_for_help)) and	
	      ((always from_bt = no) -> (always to_bt = none)) and
      	      (always (from_bt != enable -> always (to_bt != succeeded)));


COMPONENT ROBOT_AND_ENVIRONMENT
 INTERFACE
  INPUT PORT req_Ask_for_help: boolean;
  INPUT PORT req_Fetch_bottle: boolean;
  INPUT PORT req_Find_bottle: boolean;
  INPUT PORT req_Go_to_kitchen: boolean;
  OUTPUT PORT is_help_given: {none, failed, succeeded};
  OUTPUT PORT is_bottle_fetched: {none, failed, succeeded};
  OUTPUT PORT is_bottle_found: {none, failed, succeeded};
  OUTPUT PORT is_robot_in_kitchen: {none, failed, succeeded};

  CONTRACT env_contract
   assume:  always ((req_Go_to_kitchen or req_Find_bottle or req_Fetch_bottle) -> !req_Ask_for_help);
   guarantee: (always ((is_robot_in_kitchen != succeeded until req_Go_to_kitchen) or !req_Go_to_kitchen)) and
              (always ((is_bottle_found != succeeded until req_Find_bottle) or !req_Find_bottle)) and
              (always ((is_bottle_fetched != succeeded until req_Fetch_bottle) or !req_Fetch_bottle)) and
	      (always (req_Go_to_kitchen and is_robot_in_kitchen != failed) -> in the future is_robot_in_kitchen = succeeded) and
   	      (always (is_robot_in_kitchen = succeeded and req_Find_bottle and is_bottle_found != failed) -> in the future is_bottle_found = succeeded) and
	      (always (is_bottle_found = succeeded and req_Fetch_bottle and is_bottle_fetched != failed) -> in the future is_bottle_fetched = succeeded) and
	      (always (req_Ask_for_help -> in the future is_help_given = succeeded)) and
              (always (is_robot_in_kitchen = succeeded -> always is_robot_in_kitchen = succeeded)) and
	      (always (is_bottle_found = succeeded -> always is_bottle_found = succeeded)) and
	      (always (is_bottle_fetched = succeeded -> always is_bottle_fetched = succeeded));