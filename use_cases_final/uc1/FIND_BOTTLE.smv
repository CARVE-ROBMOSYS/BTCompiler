
-- ===============================================================================
MODULE main
    VAR
        FIND_BOTTLE_inst : FIND_BOTTLE(from_bt, is_bottle_found);
    VAR
        from_bt : {disable, enable, no};
        is_bottle_found : {none, failed, succeeded};

    DEFINE
        to_bt := FIND_BOTTLE_inst.to_bt;
        req_Find_bottle := FIND_BOTTLE_inst.req_Find_bottle;


-- ===============================================================================
--                               End of module
-- ===============================================================================

-- ===============================================================================
MODULE FIND_BOTTLE(from_bt, is_bottle_found)
    VAR
        to_bt : {none, disabled, running, failed, succeeded};
        req_Find_bottle : boolean;
	state : {far, finding, near};	

    ASSIGN
	init(to_bt) := none;
	init(req_Find_bottle) := FALSE;
	init(state) := far;

	next(to_bt) :=
	  case
	    from_bt = disable : disabled;
	    from_bt = no : none;
	    state = far : running;
	    state = finding & is_bottle_found = succeeded : succeeded;
            state = finding & is_bottle_found = failed : failed;
            state = finding & is_bottle_found = none : running;
	    TRUE: succeeded; -- i.e. state = near
	  esac;

	next(req_Find_bottle) :=
	  case
	    from_bt = enable : TRUE;
	    from_bt = disable : FALSE;
	    TRUE : req_Find_bottle;
	  esac;

  	next(state) :=
	  case
	    (state = far & from_bt = enable) : finding;
	    state = far : far;
	    (state = finding & is_bottle_found = succeeded) : near;
	    (state = finding & is_bottle_found = failed) : far;
	    state = finding : finding;
	    TRUE: near;
	  esac;


-- ===============================================================================
--                               End of module
-- ===============================================================================
