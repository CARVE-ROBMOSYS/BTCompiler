
-- ===============================================================================
MODULE main
    VAR
        SET_INV_POSE_NOT_VALID_inst : SET_INV_POSE_NOT_VALID(from_bt, is_inv_pose_valid);
    VAR
        from_bt : {disable, enable, no};
        is_inv_pose_valid : {none, failed, succeeded};

    DEFINE
        to_bt := SET_INV_POSE_NOT_VALID_inst.to_bt;
        req_inv_pose_not_valid := FIND_BOTTLE_inst.req_inv_pose_not_valid;


-- ===============================================================================
--                               End of module
-- ===============================================================================

-- ===============================================================================
MODULE SET_INV_POSE_NOT_VALID(from_bt, is_inv_pose_valid)
    VAR
        to_bt : {none, disabled, running, failed, succeeded};
        req_inv_pose_not_valid : boolean;
	state : {idle, computing, set_invalid, disabled_idle, disabled_set_invalid};	

    ASSIGN
	init(to_bt) := none;
	init(req_inv_pose_not_valid) := FALSE;
	init(state) := idle;

	next(to_bt) :=
	  case
	    (state = idle & from_bt = enable) : running;
	    (state = idle & from_bt = disable) : disabled;
	    (state = computing & (from_bt = no | (from_bt = enable & is_inv_pose_valid = none))) : running;
	    (state = computing & (from_bt = enable & is_inv_pose_valid = failed)) : succeeded;
	    (state = computing & from_bt = disable): disabled;
	    (state = set_invalid & from_bt = enable) : running;
	    (state = set_invalid & from_bt = no) : succeeded;
	    (state = set_invalid & from_bt = disable) : disabled;
	    (state = disabled_idle & (from_bt = disable | from_bt = no)) : disabled;
	    (state = disabled_idle & from_bt = enable) : running;
	    (state = disabled_set_invalid & (from_bt = disable | from_bt = no)) : disabled;
	    (state = disabled_set_invalid & from_bt = enable) : running;
	    TRUE: none;
	  esac;

	next(req_inv_pose_not_valid) :=
	  case
	    (state = idle & from_bt = enable) : TRUE;
	    (state = computing & (from_bt = no | (from_bt = enable & is_inv_pose_valid = none))) : TRUE;
	    (state = disabled_idle & from_bt = enable) : TRUE;
	    (state = set_invalid & from_bt = enable): TRUE;
	    (state = disabled_set_invalid & from_bt = enable) : TRUE;
	    TRUE: FALSE;
	  esac;

  	next(state) :=
	  case
	    (state = idle & from_bt = enable) : computing;
	    (state = idle & from_bt = disable) : disabled_idle;
	    (state = computing & (from_bt = no | (from_bt = enable & is_inv_pose_valid = none))) : computing;
	    (state = computing & (from_bt = enable & is_inv_pose_valid = failed)) : set_invalid;
	    (state = computing & from_bt = disable & is_inv_pose_valid != failed): disabled_idle;
    	    (state = computing & from_bt = disable & is_inv_pose_valid = failed): disabled_set_invalid;
	    (state = set_invalid & from_bt = enable) : computing;
    	    (state = set_invalid & from_bt = no) : set_invalid;	
	    (state = set_invalid & from_bt = disable) : disabled_set_invalid;
	    (state = disabled_idle & (from_bt = disable | from_bt = no)) : disabled_idle;
	    (state = disabled_idle & from_bt = enable) : computing;
	    (state = disabled_set_invalid & (from_bt = disable | from_bt = no)) : disabled_set_invalid;
    	    (state = disabled_set_invalid & from_bt = enable) : computing;
	    TRUE: idle;
	  esac;


-- ===============================================================================
--                               End of module
-- ===============================================================================
