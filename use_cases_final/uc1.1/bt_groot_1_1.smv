MODULE FALLBACK_NODE(visit, from_left_bt, from_right_bt)
VAR
to_left_bt : { no, enable, disable };
to_right_bt : { no, enable, disable };
output : { none, disabled, running, failed, succeeded };
cached_left : { none, disabled, running, failed, succeeded };
state : { initial, enabling_left, enabling_right, return_left, return_right, disabling_left, disabling_right };
ASSIGN
init(to_left_bt) := no;
init(to_right_bt) := no;
init(output) := none;
init(cached_left) := none;
init(state) := initial;
next(to_left_bt) := case
state = initial & visit = enable : enable;
state = initial & visit = disable : disable;
state = enabling_left & from_left_bt = none : enable;
state = disabling_left & !(from_left_bt = disabled) : disable;
TRUE : no;
esac;
next(to_right_bt) := case
state = enabling_left & from_left_bt = failed : enable;
state = enabling_left & (from_left_bt = running | from_left_bt = succeeded) : disable;
state = enabling_right & from_right_bt = none : enable;
state = disabling_right & !(from_right_bt = disabled) : disable;
TRUE : no;
esac;
next(output) := case
state = enabling_right & !(from_right_bt = none) : from_right_bt;
state = disabling_right & from_right_bt = disabled : cached_left;
TRUE : none;
esac;
next(cached_left) := case
state = enabling_left & (from_left_bt = running | from_left_bt = succeeded) : from_left_bt;
state = disabling_left & from_left_bt = disabled : from_left_bt;
state = disabling_right & !(from_right_bt = disabled) : cached_left;
TRUE : none;
esac;
next(state) := case
state = initial & visit = enable : enabling_left;
state = initial & visit = disable : disabling_left;
state = enabling_left & from_left_bt = failed : enabling_right;
state = enabling_left & from_left_bt = none : enabling_left;
state = enabling_left & (from_left_bt = running | from_left_bt = succeeded) : disabling_right;
state = enabling_right & from_right_bt = none : enabling_right;
state = enabling_right & !(from_right_bt = none) : return_right;
state = disabling_right & !(from_right_bt = disabled) : disabling_right;
state = disabling_right & from_right_bt = disabled : return_left;
state = disabling_left & !(from_left_bt = disabled) : disabling_left;
state = disabling_left & from_left_bt = disabled : disabling_right;
TRUE : initial;
esac;

MODULE SEQUENCE_NODE(visit, from_left_bt, from_right_bt)
VAR
to_left_bt : { no, enable, disable };
to_right_bt : { no, enable, disable };
output : { none, disabled, running, failed, succeeded };
cached_left : { none, disabled, running, failed, succeeded };
state : { initial, enabling_left, enabling_right, return_left, return_right, disabling_left, disabling_right };
ASSIGN
init(to_left_bt) := no;
init(to_right_bt) := no;
init(output) := none;
init(cached_left) := none;
init(state) := initial;
next(to_left_bt) := case
state = initial & visit = enable : enable;
state = initial & visit = disable : disable;
state = enabling_left & from_left_bt = none : enable;
state = disabling_left & !(from_left_bt = disabled) : disable;
TRUE : no;
esac;
next(to_right_bt) := case
state = enabling_left & from_left_bt = succeeded : enable;
state = enabling_left & (from_left_bt = running | from_left_bt = failed) : disable;
state = enabling_right & from_left_bt = none : enable;
state = disabling_right & !(from_right_bt = disabled) : disable;
TRUE : no;
esac;
next(output) := case
state = enabling_right & !(from_right_bt = none) : from_right_bt;
state = disabling_right & from_right_bt = disabled : cached_left;
TRUE : none;
esac;
next(cached_left) := case
state = enabling_left & (from_left_bt = running | from_left_bt = failed) : from_left_bt;
state = disabling_left & from_left_bt = disabled : from_left_bt;
state = disabling_right & !(from_right_bt = disabled) : cached_left;
TRUE : none;
esac;
next(state) := case
state = initial & visit = enable : enabling_left;
state = initial & visit = disable : disabling_left;
state = enabling_left & from_left_bt = succeeded : enabling_right;
state = enabling_left & from_left_bt = none : enabling_left;
state = enabling_left & (from_left_bt = running | from_left_bt = failed) : disabling_right;
state = enabling_right & from_right_bt = none : enabling_right;
state = enabling_right & !(from_right_bt = none) : return_right;
state = disabling_right & !(from_right_bt = disabled) : disabling_right;
state = disabling_right & from_right_bt = disabled : return_left;
state = disabling_left & !(from_left_bt = disabled) : disabling_left;
state = disabling_left & from_left_bt = disabled : disabling_right;
TRUE : initial;
esac;

MODULE BT_FSM(visit, from_Robot_in_kitchen, from_Go_to_kitchen, from_Bottle_found, from_Find_bottle, from_Bottle_grasped, from_Inv_pose_computed, from_Inv_pose_valid, from_Compute_inv_pose, from_Robot_at_inv_pose, from_Go_to_inv_pose, from_Bottle_located_with_confidence_x, from_Locate_bottle, from_Grasp_bottle, from_Set_inv_pose_not_valid, from_Ask_for_help)
VAR
FB1 : FALLBACK_NODE(visit, S1.output, from_Ask_for_help);
S1 : SEQUENCE_NODE(FB1.to_left_bt, FB2.output, S2.output);
FB2 : FALLBACK_NODE(S1.to_left_bt, from_Robot_in_kitchen, from_Go_to_kitchen);
S2 : SEQUENCE_NODE(S1.to_right_bt, FB3.output, FB4.output);
FB3 : FALLBACK_NODE(S2.to_left_bt, from_Bottle_found, from_Find_bottle);
FB4 : FALLBACK_NODE(S2.to_right_bt, from_Bottle_grasped, FB5.output);
FB5 : FALLBACK_NODE(FB4.to_right_bt, S3.output, from_Set_inv_pose_not_valid);
S3 : SEQUENCE_NODE(FB5.to_left_bt, FB7.output, S4.output);
FB7 : FALLBACK_NODE(S3.to_left_bt, S6.output, from_Compute_inv_pose);
S6 : SEQUENCE_NODE(FB7.to_left_bt, from_Inv_pose_computed, from_Inv_pose_valid);
S4 : SEQUENCE_NODE(S3.to_right_bt, FB8.output, S5.output);
FB8 : FALLBACK_NODE(S4.to_left_bt, from_Robot_at_inv_pose, from_Go_to_inv_pose);
S5 : SEQUENCE_NODE(S4.to_right_bt, FB9.output, from_Grasp_bottle);
FB9 : FALLBACK_NODE(S5.to_left_bt, from_Bottle_located_with_confidence_x, from_Locate_bottle);
DEFINE
to_Ask_for_help := FB1.to_right_bt;
to_Set_inv_pose_not_valid := FB5.to_right_bt;
to_Grasp_bottle := S5.to_right_bt;
to_Locate_bottle := FB9.to_right_bt;
to_Bottle_located_with_confidence_x := FB9.to_left_bt;
to_Go_to_inv_pose := FB8.to_right_bt;
to_Robot_at_inv_pose := FB8.to_left_bt;
to_Compute_inv_pose := FB7.to_right_bt;
to_Inv_pose_valid := S6.to_right_bt;
to_Inv_pose_computed := S6.to_left_bt;
to_Bottle_grasped := FB4.to_left_bt;
to_Find_bottle := FB3.to_right_bt;
to_Bottle_found := FB3.to_left_bt;
to_Go_to_kitchen := FB2.to_right_bt;
to_Robot_in_kitchen := FB2.to_left_bt;
output := FB1.output;

MODULE main()
VAR
BT_FSM_inst : BT_FSM(visit, from_Robot_in_kitchen, from_Go_to_kitchen, from_Bottle_found, from_Find_bottle, from_Bottle_grasped, from_Inv_pose_computed, from_Inv_pose_valid, from_Compute_inv_pose, from_Robot_at_inv_pose, from_Go_to_inv_pose, from_Bottle_located_with_confidence_x, from_Locate_bottle, from_Grasp_bottle, from_Set_inv_pose_not_valid, from_Ask_for_help);
visit : { no, enable, disable };
from_Robot_in_kitchen : { none, disabled, running, failed, succeeded };
from_Go_to_kitchen : { none, disabled, running, failed, succeeded };
from_Bottle_found : { none, disabled, running, failed, succeeded };
from_Find_bottle : { none, disabled, running, failed, succeeded };
from_Bottle_grasped : { none, disabled, running, failed, succeeded };
from_Inv_pose_computed : { none, disabled, running, failed, succeeded };
from_Inv_pose_valid : { none, disabled, running, failed, succeeded };
from_Compute_inv_pose : { none, disabled, running, failed, succeeded };
from_Robot_at_inv_pose : { none, disabled, running, failed, succeeded };
from_Go_to_inv_pose : { none, disabled, running, failed, succeeded };
from_Bottle_located_with_confidence_x : { none, disabled, running, failed, succeeded };
from_Locate_bottle : { none, disabled, running, failed, succeeded };
from_Grasp_bottle : { none, disabled, running, failed, succeeded };
from_Set_inv_pose_not_valid : { none, disabled, running, failed, succeeded };
from_Ask_for_help : { none, disabled, running, failed, succeeded };
DEFINE
output := BT_FSM_inst.output;
to_Robot_in_kitchen := BT_FSM_inst.to_Robot_in_kitchen;
to_Go_to_kitchen := BT_FSM_inst.to_Go_to_kitchen;
to_Bottle_found := BT_FSM_inst.to_Bottle_found;
to_Find_bottle := BT_FSM_inst.to_Find_bottle;
to_Bottle_grasped := BT_FSM_inst.to_Bottle_grasped;
to_Inv_pose_computed := BT_FSM_inst.to_Inv_pose_computed;
to_Inv_pose_valid := BT_FSM_inst.to_Inv_pose_valid;
to_Compute_inv_pose := BT_FSM_inst.to_Compute_inv_pose;
to_Robot_at_inv_pose := BT_FSM_inst.to_Robot_at_inv_pose;
to_Go_to_inv_pose := BT_FSM_inst.to_Go_to_inv_pose;
to_Bottle_located_with_confidence_x := BT_FSM_inst.to_Bottle_located_with_confidence_x;
to_Locate_bottle := BT_FSM_inst.to_Locate_bottle;
to_Grasp_bottle := BT_FSM_inst.to_Grasp_bottle;
to_Set_inv_pose_not_valid := BT_FSM_inst.to_Set_inv_pose_not_valid;
to_Ask_for_help := BT_FSM_inst.to_Ask_for_help;

